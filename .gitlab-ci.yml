image: node:latest

services:
  - postgres:latest

variables:
  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: dairynomics
  POSTGRES_USER: dairynomics
  POSTGRES_PASSWORD: ''

stages:
  - build
  - connect
  - test
  - review
  - production

cache:
  paths:
    - node_modules/

install_dependencies:
  stage: build
  script:
    - npm install
  artifacts:
    paths:
      - node_modules/
connect_to_database:
  stage: connect
  image: postgres
  script:
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

run_tests:
  stage: test
  environment: test
  script:
    - npm run reset:db
    - npm test
    - npm run coverage

start_review:
  stage: review
  environment: preview
  script:
    - >-
    - chmod u+x ./start_review_scripts.bash
    - ./start_review_scripts.bash
  environment:
    name: review/$CI_BUILD_REF_NAME
    url: https://$PROJECT_NAME-$CI_COMMIT_SHORT_SHA.herokuapp.com/
    on_stop: stop_review
  only:
    - branches
  except:
    - master
    - develop

stop_review:
  stage: review
  variables:
    GIT_STRATEGY: none
  script:
    - >-
      curl 
      -X DELETE 
      https://api.heroku.com/apps/$PROJECT_NAME-$CI_COMMIT_SHORT_SHA 
      -H "Content-Type: application/json" 
      -H "Accept: application/vnd.heroku+json; version=3" 
      -H "Authorization: Bearer $HEROKU_API_KEY"
  when: manual
  environment:
    name: review/$CI_BUILD_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master
    - develop

deploy-production:
  stage: production
  script:
  - apt-get update -qy
  - apt-get install -y ruby-dev
  - gem install dpl
  - dpl --provider=heroku --app=$APP_NAME --api-key=$HEROKU_API_KEY
  only:
  - develop
